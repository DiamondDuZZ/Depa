const express = require("express");
const router = express.Router();
const db = require("../db");

router.get("/form1", (req, res) => {
  const sql = "SELECT * FROM criteria WHERE form = 1";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
    } else {
      res.status(200).json(results);
    }
  });
});
router.get("/form2", (req, res) => {
  const sql = "SELECT * FROM criteria WHERE form = 2";
  db.query(sql, (err, results) => {
    if (err) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err);
      res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
    } else {
      res.status(200).json(results);
    }
  });
});

// üìå ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô commentscore ‡∏ï‡∏≤‡∏° user_id ‡πÅ‡∏•‡∏∞ user_probation_id
router.get("/commentscore", (req, res) => {
  const { user_id, user_probation_id } = req.query;
  const sql = `
      SELECT * FROM commentscore WHERE user_id = ? AND user_probation_id = ?
    `;

  db.query(sql, [user_id, user_probation_id], (err, results) => {
    if (err) {
      console.error("‚ùå Error fetching commentscore:", err);
      res.status(500).json({ error: "Database error" });
      return;
    }
    res.json(results);
  });
});

// üìå ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á commentoverall ‡∏ï‡∏≤‡∏° user_id ‡πÅ‡∏•‡∏∞ user_probation_id
router.get("/commentoverall", (req, res) => {
  const { user_id, user_probation_id } = req.query;
  const sql = `
      SELECT * FROM commentoverall WHERE user_id = ? AND user_probation_id = ?
    `;

  db.query(sql, [user_id, user_probation_id], (err, results) => {
    if (err) {
      console.error("‚ùå Error fetching commentoverall:", err);
      res.status(500).json({ error: "Database error" });
      return;
    }
    res.json(results.length > 0 ? results[0] : { comment_detail: "" });
  });
});

// üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô commentscore ‡πÅ‡∏•‡∏∞ commentoverall
router.post("/commentscore", (req, res) => {
  const { user_id, user_probation_id, scores, comment } = req.body;

  const sqlSelect = `
      SELECT * FROM commentscore WHERE user_id = ? AND user_probation_id = ? AND criteria_id = ?
    `;

  const sqlInsert = `
      INSERT INTO commentscore (user_id, user_probation_id, criteria_id, score, created_at, updated_at) 
      VALUES (?, ?, ?, ?, NOW(), NOW())
    `;

  const sqlUpdate = `
      UPDATE commentscore SET score = ?, updated_at = NOW() 
      WHERE user_id = ? AND user_probation_id = ? AND criteria_id = ?
    `;

  const sqlCommentSelect = `
      SELECT * FROM commentoverall WHERE user_id = ? AND user_probation_id = ?
    `;

  const sqlCommentInsert = `
      INSERT INTO commentoverall (comment_detail, user_id, user_probation_id) 
      VALUES (?, ?, ?)
    `;

  const sqlCommentUpdate = `
      UPDATE commentoverall SET comment_detail = ? WHERE user_id = ? AND user_probation_id = ?
    `;

  // ‡πÉ‡∏ä‡πâ Promise.all() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á commentscore
  const updateScores = scores.map((s) => {
    return new Promise((resolve, reject) => {
      db.query(
        sqlSelect,
        [user_id, user_probation_id, s.id],
        (err, results) => {
          if (err) {
            reject(err);
            return;
          }

          if (results.length > 0) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß => ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            db.query(
              sqlUpdate,
              [s.score, user_id, user_probation_id, s.id],
              (err) => {
                if (err) reject(err);
                else resolve();
              }
            );
          } else {
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ => ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            db.query(
              sqlInsert,
              [user_id, user_probation_id, s.id, s.score],
              (err) => {
                if (err) reject(err);
                else resolve();
              }
            );
          }
        }
      );
    });
  });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° commentoverall
  const updateComment = new Promise((resolve, reject) => {
    db.query(sqlCommentSelect, [user_id, user_probation_id], (err, results) => {
      if (err) {
        reject(err);
        return;
      }

      if (results.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        db.query(
          sqlCommentUpdate,
          [comment, user_id, user_probation_id],
          (err) => {
            if (err) reject(err);
            else resolve();
          }
        );
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        db.query(
          sqlCommentInsert,
          [comment, user_id, user_probation_id],
          (err) => {
            if (err) reject(err);
            else resolve();
          }
        );
      }
    });
  });

  // ‡∏ó‡∏≥ Promise.all() ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à
  Promise.all([...updateScores, updateComment])
    .then(() => {
      res.json({ message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    })
    .catch((error) => {
      console.error("‚ùå Error updating commentscore or commentoverall:", error);
      res.status(500).json({ error: "Database error" });
    });
});

router.get("/commentscoreall", (req, res) => {
    const { user_id, user_probation_id } = req.query;

    if (!user_id || !user_probation_id) {
        return res.status(400).json({ error: "Missing required parameters" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á user_probation_id ‡πÄ‡∏õ‡πá‡∏ô Array (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏à‡∏£‡∏¥‡∏á‡πÜ)
    const probationIds = user_probation_id.split(',').map(id => parseInt(id));

    if (probationIds.length === 0) {
        return res.status(400).json({ error: "Invalid user_probation_id values" });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Query ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `IN (?, ?, ?, ?)`
    const sql = `
      SELECT commentscore_id, user_id, user_probation_id, criteria_id, score, created_at, updated_at
      FROM commentscore
      WHERE user_id = ? AND user_probation_id IN (${probationIds.map(() => "?").join(",")});
    `;

    console.log("üìå Final SQL Query:", sql); // ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Query

    // ‚úÖ ‡πÉ‡∏ä‡πâ Spread Operator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MySQL ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Array ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    db.query(sql, [user_id, ...probationIds], (err, results) => {
        if (err) {
            console.error("‚ùå Error fetching commentscore:", err);
            return res.status(500).json({ error: "Database query error" });
        }
        res.json(results);
    });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏´‡∏•‡∏≤‡∏¢ user_probation_id)
router.get("/comment_overall", (req, res) => {
    const { user_id, user_probation_id } = req.query;
  
    if (!user_id || !user_probation_id) {
      return res.status(400).json({ error: "Missing required parameters" });
    }
  
    const probationIds = user_probation_id.split(",").map((id) => parseInt(id.trim()));
  
    // ‚úÖ ‡πÉ‡∏ä‡πâ `JOIN users` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á f_name, l_name ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
    const sql = `
      SELECT co.commentoverall_id, co.comment_detail, co.user_id, co.user_probation_id, 
             u.f_name, u.l_name
      FROM commentoverall co
      JOIN users u ON co.user_id = u.user_id
      WHERE co.user_id = ? AND co.user_probation_id IN (${probationIds.map(() => '?').join(',')});
    `;
  
    db.query(sql, [user_id, ...probationIds], (err, results) => {
      if (err) {
        console.error("‚ùå Error fetching commentoverall:", err);
        return res.status(500).json({ error: "Database query error" });
      }
      res.json(results);
    });
  });
  

module.exports = router;
